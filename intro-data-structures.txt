
Exercises

For exercises requiring code, you are free to use the language of your choice.


1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

	const amusementParkLine = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

	amusementParkLine.push("Mary");

	console.log(amusementParkLine);

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

	const findPositionInArray = function(array, name) {
            for ( i = 0; i < array.length; i++) {
		if ( array[i] === name ) {
		    return i; 
		}
            }
	    return "Customer not found"; 
        }

        console.log(findPositionInArray(amusementParkLine, "Josh"));


d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

	console.log(findPositionInArray(amusementParkLine, "Emily"));

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

	amusementParkLine.splice(1, 0, "Melissa");

	console.log(amusementParkLine);

f) If Patrick wants to leave the line, how would you delete him from the array?

	amusementParkLine.splice(4, 1);

	console.log(amusementParkLine);



    	** DROP THE BELOW CODE INTO CODEPEN OR OTHER CODE TESTER TO VERIFY IT WORKS **


	const amusementParkLine = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

	amusementParkLine.push("Mary");

	console.log(amusementParkLine);

	const findPositionInArray = function(array, name) {
            for ( i = 0; i < array.length; i++) {
		if ( array[i] === name ) {
		    return i; 
		}
            }
	    return "Customer not found"; 
        }

        console.log(findPositionInArray(amusementParkLine, "Josh"));

	console.log(findPositionInArray(amusementParkLine, "Emily"));

        amusementParkLine.splice(1, 0, "Melissa");

	console.log(amusementParkLine);

	amusementParkLine.splice(4, 1);

	console.log(amusementParkLine);



2. Provide another real-world example that you can model using a data structure.

	ANOTHER REAL-WORLD EXAMPLE WOULD BE AN AUTOMATIC CALL DISTRIBUTOR SYSTEM USED IN MANY CALL CENTERS. WHEN A CALLER RINGS IN AND THERE ARE NO AGENTS AVAILABLE, A QUEUE IS STARTED FOR ALL CALLERS WAITING ON AN AVAILABLE AGENT.

		Each queue is composed of callers, represented as strings.

		The queue is first-in first-out, meaning that the earliest callers will be at the front of the queue and the most recent callers at the back. 

		When someone calls, they are placed at the end of the queue.

		If a caller loses patience and hangs up, all callers behind the one hanging up will move forward by one place.

		When an agent becomes available, the caller at the front will exit the queue and each caller in the queue will move forward.

		Callers have no way to 'cut' in line, the caller's position in the queue entirely depends on the time of the call.


3. How would your data structure allow developers to access and manipulate the data?

	AN ARRAY IS USED TO PUT EACH CALLER ALONG WITH THEIR NUMBER IN CHRONOLOGICAL ORDER.  THE NUMBER AT THE END OF 'CALLER' INDICATES THE NUMBER FOR THAT DAY'S CALLS.  FOR INSTANCE, CALLER37 WOULD BE 	THE 37TH CALLER FOR THAT DAY'S CALLS.

		const callCenterQueue = ['caller53', 'caller54', 'caller55', 'caller56', 'caller57'];

	THE PUSH METHOD IS USED TO PLACE NEW CALLERS AT THE END OF THE QUE.

		callCenterQueue.push('caller58');

	THE SPLICE METHOD CAN REMOVE A CALLER THAT HANGS UP BEFORE REACHING AN AGENT.

		callCenterQueue.splice(2, 1);

	THE SHIFT METHOD REMOVES THE CALLER AT THE BEGINNING OF THE ARRAY WHEN AN AGENT BECOMES AVAILABLE.

		callCenterQueue.shift(); 
	



		

	

	