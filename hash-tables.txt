
EXERCISES

1. What is a hash table?

	A hash table is a data structure that is used to store data in the form of a key associated with a value. The key is usually a string and the value can be any data type. 

2. What is hashing?

	Hashing is the use of a hash function to take in data, generally a string, and convert it into a number that can be assigned to a specific location in a hash table.

3. How does a hash table store data?

	A hash table stores data in the form of a key value pair, and uses an array with pre-determined 'buckets' to store the key value pairs.  The 'bucket' that the key value pair is stored into is determined by the result of a hashing function that returns the number of the 'bucket' in the hash table.  In the case that two pieces of data are stored in the same bucket, a linked list is formed and the most recent data added to the hash table is placed further down the list.  


4. How are hash tables and objects different?

	Hash tables are array 'buckets' that hold multiple key value pair data objects.  A hashing function is used on the 'key' piece of the data pair and determines which 'bucket' the object is placed.  The purpose of a hash table is to provide a list of records that can be quickly recorded to and retrieved from by a user.  On the other hand, an object by itself is a collection of properties and methods that can be called by referencing the object.  A hash table is a collection of objects that can contain multiple properties, generally of a similar type such as user information or account information, that can be quickly stored and retrieved by referencing the 'key' data point.  

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:

	A list of pets and their unique names.

		This information can be stored using an object.  With this being such a small source of data that will probably not change often, an object would be the more simple choice.
	

	The name, age, and the birthday of your best friend.

		This information can be stored using an object.  The name, age, and birthday of a best friend is not a lot of information and it is not going to change.


	The name and location of every company in a given city.

		A hash table would be best.  There are likely to be thousands of businesses of various sizes in a given city and the information would need to be regularly updated as new businesses 			opened and old ones closed.


	All of the books checked out from a library by a particular individual.

		A hash table would be best.  There are likely to be many individuals checking books in and out at a local library.  In order to quickly reference what books an individual patron has 			checked out, a hash table with a unique key for the individual patron would be the most efficient way.


	The primary and secondary phone numbers for a contact.

		This would be best stored using a hash table, because there will probably be multiple pieces of information that need to be retrieved quickly for multiple contacts.




PROGRAMMING QUESTIONS



CREATE A HASH TABLE THAT ALLOWS A SALES ASSOCIATE TO ENTER A CUSTOMER'S NAME, ADDRESS, AND PHONE NUMBER INTO THE SYSTEM AND LOOK UP CUSTOMERS USING THEIR PHONE NUMBERS.


class HashNode {
  constructor(key, name, address, next) {
    this.key = key;
    this.name = name;
    this.address = address;
    this.next = next || null;
  }
}


class HashTable {
  constructor(size) {
    this.buckets = Array(size);
    this.numBuckets = this.buckets.length;
  }
    
  hash(key) {
    let total = 0;
    for (let i = 0; i < key.length; i++) {
      total += key.charCodeAt(i);
    }
    let bucket = total % this.numBuckets;
    return bucket;
  }
    
  addNode(key, name, address) {
    let index = this.hash(key);
      
    if (!this.buckets[index]) {
      this.buckets[index] = new HashNode(key, name, address);
    }
    else {
      let currentNode = this.buckets[index];
          
      while (currentNode.next) {
        currentNode = currentNode.next;
      }
      currentNode.next = new HashNode(key, name, address);
    }
  }
    
  retrieveData(key) {
    let index = this.hash(key);
      
    if (!this.buckets[index]) {
      return null;
    }
    else {
      let currentNode = this.buckets[index];
      while (currentNode) {
        if (currentNode.key === key) {
          return ('Phone Number: ' + currentNode.key + ' Customer Name: ' + currentNode.name + ' Address: ' + currentNode.address);
        }
        else {
          currentNode = currentNode.next;
        }
      }
      return null;
    }
  }
    
}

const test = new HashTable(20);

test.addNode('(222)222-2233', 'James', 'Parkland Drive');
test.addNode('(444)555-2211', 'Pat', 'Main Street');

console.log(test.buckets);

console.log(test.retrieveData('(222)222-2233'));




CREATE A HASH TABLE THAT ALLOWS A STORE OWNER TO TRACK THEIR STORE'S INVENTORY AND QUANTITY.

		
class HashNode {
  constructor(key, quantity, next) {
    this.key = key;
    this.quantity = quantity;
    this.next = next || null;
  }
}


class HashTable {
  constructor(size) {
    this.buckets = Array(size);
    this.numBuckets = this.buckets.length;
  }
    
  hash(key) {
    let total = 0;
    for (let i = 0; i < key.length; i++) {
      total += key.charCodeAt(i);
    }
    let bucket = total % this.numBuckets;
    return bucket;
  }
    
  addNode(key, quantity) {
    let index = this.hash(key);
      
    if (!this.buckets[index]) {
      this.buckets[index] = new HashNode(key, quantity);
    }
    else {
      let currentNode = this.buckets[index];
          
      while (currentNode.next) {
        currentNode = currentNode.next;
      }
      currentNode.next = new HashNode(key, quantity);
    }
  }
    
  retrieveData(key) {
    let index = this.hash(key);
      
    if (!this.buckets[index]) {
      return null;
    }
    else {
      let currentNode = this.buckets[index];
      while (currentNode) {
        if (currentNode.key === key) {
          return ('Inventory Item: ' + currentNode.key + ' Amount in Stock ' + currentNode.quantity);
        }
        else {
          currentNode = currentNode.next;
        }
      }
      return null;
    }
  }
    
}

const test = new HashTable(30);

test.addNode('Wrenches', 500);
test.addNode('Spark Plugs', 40);
test.addNode('Hammers', 23);
test.addNode('Metal Sheets', 100);

console.log(test.buckets);

console.log(test.retrieveData('Hammers'));
console.log(test.retrieveData('Spark Plugs')); 






CREATE A HASH TABLE THAT ALLOWS DIGITAL COPIES OF NEWSPAPERS TO BE ENTERED AND SEARCHED BY PUBLISHER AND PUBLICATION DATE.


class HashNode {
  constructor(key, publisher, publishDate, next) {
    this.key = key;
    this.publisher = publisher;
    this.publishDate = publishDate;
    this.next = next || null;
  }
}


class HashTable {
  constructor(size) {
    this.buckets = Array(size);
    this.numBuckets = this.buckets.length;
  }
    
  hash(key) {
    let total = 0;
    for (let i = 0; i < key.length; i++) {
      total += key.charCodeAt(i);
    }
    let bucket = total % this.numBuckets;
    return bucket;
  }
    
  addNode(publisher, publishDate) {
    const key = publisher + publishDate;
    let index = this.hash(key);
      
    if (!this.buckets[index]) {
      this.buckets[index] = new HashNode(key, publisher, publishDate);
    }
    else {
      let currentNode = this.buckets[index];
          
      while (currentNode.next) {
        currentNode = currentNode.next;
      }
      currentNode.next = new HashNode(key, publisher, publishDate);
    }
  }
    
  retrieveData(publisher, publishDate) {
    const key = publisher + publishDate; 
    let index = this.hash(key);
      
    if (!this.buckets[index]) {
      return console.log('No Results Found');
    }
    else {
      let currentNode = this.buckets[index];
      while (currentNode) {
       if (currentNode.key === key) {
          return (currentNode.publisher + ' / ' + currentNode.publishDate);
        }
        else {
          currentNode = currentNode.next;
        }
      }
      return null;
    }
  }
    
}

const test = new HashTable(30);

test.addNode('New Haven Times', '07/19/2018');
test.addNode('The Main Street Post', '09/14/2016');
test.addNode('The Legislature', '12/30/2019');

console.log(test.buckets);

console.log(test.retrieveData('New Haven Times', '07/19/2018'));
console.log(test.retrieveData('The Main Street Post', '09/14/2016'));





