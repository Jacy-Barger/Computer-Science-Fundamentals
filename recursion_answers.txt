
EXERCISES


1. Define and compare recursion and iteration.

	Recursion and iteration are both ways of cycling through sets of data.  The difference is through the cycling method.  Recursion involves a function calling itself while iteration uses a looping function to iterate through a data set.  




2. Name five algorithms that are commonly implemented by recursion.

	Reversing a string
	Binary tree search
	Merge sort
	Quick sort
	Fibonacci sequence



3. When should you use recursion, and when should you avoid recursion? Give examples for each.

	Recursion should only be used if there is no iterative solution possible to solve the problem, or the iterative solution is so complicated to implement that it's not worth it.  Recursion is a more expensive procedure than iteration.  A large data set, cycled through with recursion, can have exponential time complexity.  Whereas, a single for or while loop will have linear time complexity and be much less expensive to implement than a comparable recursive solution. 




4. Compare the recursive and iterative solutions to the three algorithms from the checkpoint (factorial, maximum, and fibonacci). What is similar, and what is different?

	Factorial: Both the recursive and iterative factorial functions begin by handling the base case of returning an error if the number argument is less than 0.  After handling the base case, the rest of each of the functions returns the result in a different way.  The recursive factorial function calls itself and subtracts the argument number by 1 for each call until the number meets one of the base cases.  The iterative function sets a result variable to 1 and uses a for loop to count the argument number down and multiplies the result variable by the for loop to get the factorial answer. 


	Maximum: Both functions are similar in that they each set a variable equal to the first number in the array.  The two functions differ in that the recursive function has to declare a second variable equal to all numbers in the array after the first item.  The iterative function does not need to set additional variables other than currentMaximum.  The recursive function also requires more lines of code to add base cases at the beginning of the function that are not necessary for the iterative version.  


	Fibonacci: Both the recursion and iteration methods achieve the result of returning the required Fibonacci. However, the two methods are very different in how they return the correct result.  The recursion method appears more complicated since it requires calling itself twice for each recursion, once for 'twoBack' and once for 'oneBack'. 




5. Given a multi-dimensional collection (such as an array) where the number of dimensions is unknown, write a recursive algorithm to count the number of items in the entire collection.


const testArray = [3, 4, 2, [7,43,2], 6, [4,6], 55, 3, 7];

const countItems = (arr) => {
  let counter = 0;
  for ( var i = 0; i < arr.length; i++ ){
    if ( Array.isArray(arr[i]) ){
      counter += countItems(arr[i]);
    }else{ 
      counter++;
    }
   } 
   return counter;
}

console.log(countItems(testArray));

console.log(countItems([]));





6. A palindrome is a word or phrase whose spelling is the same either direction (e.g., racecar). Write a recursive algorithm to determine if a given word or phrase is a palindrome.


const isPalindrome = function(testString) {
  if (testString.length === 0 || testString.length === 1) {
    return true;
  }

  if (testString[0] === testString[testString.length - 1]) {
    return isPalindrome(testString.slice(1, testString.length - 1));
  }
  return false;
}

console.log(isPalindrome('kayak'));
console.log(isPalindrome('random'));




7. Google Easter Egg: Google the term "recursion". Google will prompt you with "Did you mean: recursion". Explain why this behavior exhibits properties of recursion.

	This behavior of Google plays on the idea of 'recursion' because anything that is recursive refers to itself.  Since the Google search engine asks "Did you mean: recursion?", it is like the search engine is saying, "To ask about recursion, you must first understand that you are asking about recursion". 









